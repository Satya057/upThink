{"version":3,"sources":["components/ReadOnlyRow.js","components/EditableRow.js","App.js","index.js"],"names":["ReadOnlyRow","_ref","contact","handleEditClick","handleDeleteClick","_jsxs","children","_jsx","fullName","Groups","email","type","onClick","event","id","EditableRow","editFormData","handleEditFormChange","handleCancelClick","required","placeholder","name","value","onChange","App","_useState","useState","data","_useState2","_slicedToArray","contacts","setContacts","_useState3","_useState4","addFormData","setAddFormData","_useState5","_useState6","setEditFormData","_useState7","_useState8","editContactId","setEditContactId","handleAddFormChange","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","_objectSpread","formValues","contactId","newContacts","_toConsumableArray","index","findIndex","splice","className","onSubmit","editedContact","map","Fragment","newContact","nanoid","concat","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd65eac3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick }) => {\n  return (\n    <tr>\n      <td>{contact.fullName}</td>\n      <td>{contact.Groups}</td>\n       <td>{contact.email}</td>\n      <td>\n        <button\n          type=\"button\"\n          onClick={(event) => handleEditClick(event, contact)}\n        >\n          Edit\n        </button>\n        <button type=\"button\" onClick={() => handleDeleteClick(contact.id)}>\n          Delete\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default ReadOnlyRow;\n","import React from \"react\";\n\nconst EditableRow = ({\n  editFormData,\n  handleEditFormChange,\n  handleCancelClick,\n}) => {\n  return (\n    <tr>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Enter a name...\"\n          name=\"fullName\"\n          value={editFormData.fullName}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Enter an Groups...\"\n          name=\"Groups\"\n          value={editFormData.Groups}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n     \n      <td>\n        <input\n          type=\"email\"\n          required=\"required\"\n          placeholder=\"Enter an email...\"\n          name=\"email\"\n          value={editFormData.email}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      \n      <td>\n        <button type=\"submit\">Save</button>\n        <button type=\"button\" onClick={handleCancelClick}>\n          Cancel\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default EditableRow;\n","import React, { useState, Fragment } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./App.css\";\nimport data from \"./mock-data.json\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\nimport EditableRow from \"./components/EditableRow\";\n\nconst App = () => {\n  const [contacts, setContacts] = useState(data);\n  const [addFormData, setAddFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    Groups: \"\",\n  });\n\n  const [editFormData, setEditFormData] = useState({\n    fullName: \"\",\n   email: \"\",\n    Groups: \"\",\n  });\n\n  const [editContactId, setEditContactId] = useState(null);\n\n  const handleAddFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...addFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setAddFormData(newFormData);\n  };\n\n  const handleEditFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...editFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setEditFormData(newFormData);\n  };\n\n  const handleAddFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      fullName: addFormData.fullName,\n     email: addFormData.email,\n      Groups: addFormData.Groups,\n    };\n\n    const newContacts = [...contacts, newContact];\n    setContacts(newContacts);\n  };\n\n  const handleEditFormSubmit = (event) => {\n    event.preventDefault();\n\n    const editedContact = {\n      id: editContactId,\n      fullName: editFormData.fullName,\n    email: editFormData.email,\n      Groups: editFormData.Groups,\n    };\n\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\n\n    newContacts[index] = editedContact;\n\n    setContacts(newContacts);\n    setEditContactId(null);\n  };\n\n  const handleEditClick = (event, contact) => {\n    event.preventDefault();\n    setEditContactId(contact.id);\n\n    const formValues = {\n      fullName: contact.fullName,\n      email: contact.email,\n      Groups: contact.Groups,\n    };\n\n    setEditFormData(formValues);\n  };\n\n  const handleCancelClick = () => {\n    setEditContactId(null);\n  };\n\n  const handleDeleteClick = (contactId) => {\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === contactId);\n\n    newContacts.splice(index, 1);\n\n    setContacts(newContacts);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <form onSubmit={handleEditFormSubmit}>\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n             \n              <th>Groups</th>\n              <th>Email</th>\n              \n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {contacts.map((contact) => (\n              <Fragment>\n                {editContactId === contact.id ? (\n                  <EditableRow\n                    editFormData={editFormData}\n                    handleEditFormChange={handleEditFormChange}\n                    handleCancelClick={handleCancelClick}\n                  />\n                ) : (\n                  <ReadOnlyRow\n                    contact={contact}\n                    handleEditClick={handleEditClick}\n                    handleDeleteClick={handleDeleteClick}\n                  />\n                )}\n              </Fragment>\n            ))}\n          </tbody>\n        </table>\n      </form>\n\n      <h2>Add a Contact</h2>\n      <form onSubmit={handleAddFormSubmit}>\n        <input\n          type=\"text\"\n          name=\"fullName\"\n          required=\"required\"\n          placeholder=\"Enter a name...\"\n          onChange={handleAddFormChange}\n        />\n     \n         \n        <input\n          type=\"email\"\n          name=\"email\"\n          required=\"required\"\n          placeholder=\"Enter an email...\"\n          onChange={handleAddFormChange}\n        />\n           <input\n          type=\"text\"\n          name=\"Groups\"\n          required=\"required\"\n          placeholder=\"Enter an Groups...\"\n          onChange={handleAddFormChange}\n        />\n        <button type=\"submit\">Add</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}